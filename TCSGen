#!/usr/bin/env python3
#encoding: UTF-8

import getopt
import sys
import os

def usage():
    print("The usage:");
    print("python TCSGen.py -n Nsim -e Ebeam -t t_lim --Egmin Egmin --Egmax Egmax --q2Cut Q2CutValue -l (write output in LUND file)");
    print("As an example ");
    print("python TCSGen.py -n 10000 -e 10.6 -t -1.2 --Egmin 4 --Egmax 10.6 --q2Cut 0.02 -l ");

def main():

# Default values of generator parameters
    Nsim = 10000
    Eb = 10.6
    tLim = -1.8
    EgMin = 4
    EgMax = 10.6
    Q2Cut = 0.02
    LUND = 0
    Run = True;
    Seed = 0;
    MinvMin = 2;
    vz_max =  2.5;
    vz_min = -2.5;
    tar = "default";  
    model = "default";
    c_sec = "default";

    try:
        opts, args = getopt.getopt(sys.argv[1:], "n:e:t:lhor", ["help", "output=", "Egmin=", "Egmax=", "MinvMin=", "q2Cut=", "LUND", "Run", "trig=", "seed=", "docker", "vzMin=", "vzMax=","Target=","Model=","CrsSec="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print (str(err))  # will print something like "option -e not recognized"
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-n", "--trig"):
            Nsim = a
        elif o in("--seed"):
            Seed = a
        elif o == "-e":
            Eb = a
        elif o == "-t":
            if(float(a) > 0):
                print("You provided tMax as " + a)
                print("tMax should be a negative number.")
                print("Exiting")
                sys.exit()
            tLim = a
        elif o in ("--Egmin"):
            EgMin = a;
        elif o in ("--Egmax"):
            EgMax = a;
        elif o in ("--MinvMin"):
            MinvMin = a;
        elif o in ("--q2Cut"):
            Q2Cut = a;
        elif o in ("--vzMin"):
            vz_min = a;
        elif o in ("--vzMax"):
            vz_max = a;
        elif o in ("-l", "--LUND"):
            LUND = 1;
        elif o in ("--Target"):
            tar = a;
        elif o in ("--Model"):
            model = a;
        elif o in ("--CrsSec"):
            c_sec = a;
        elif o in ("-r", "--Run"):
            Run = True;
        elif o in("--docker"):
            print("With docker")
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        else:
            assert False, "unhandled option"


    optFile = open("GenOptions.dat","w")

    optFile.write("Nsim     " + str(Nsim) + "\n");
    optFile.write("Eb       " + str(Eb) + "\n");
    optFile.write("tLim     " + str(tLim) + "\n");
    optFile.write("EgMin    " + str(EgMin) + "\n");
    optFile.write("EgMax    " + str(EgMax) + "\n");
    optFile.write("vzMax    " + str(vz_max) + "\n");
    optFile.write("vzMin    " + str(vz_min) + "\n");
    optFile.write("MinvMin  " + str(MinvMin) + "\n");
    optFile.write("Q2Cut    " + str(Q2Cut) + "\n");
    optFile.write("LUND     " + str(LUND)  + "\n");
    optFile.write("Seed     " + str(Seed)+ "\n");
    optFile.write("Target   " + tar + "\n");
    optFile.write("Model    " + model +"\n");
    optFile.write("CrsSec   " + c_sec);

    optFile.close()


    if(Run):
        if os.path.exists("./TCSGen.exe"):
            Cmd = "./TCSGen.exe"
        else:
            # let it find it in $PATH:
            Cmd = "TCSGen.exe"
        print("Running the generator from the python code \n")
        os.system(Cmd);

if __name__ == "__main__":
    main();
